// HackerEarth November circuits solution
Q1. Find Pairs Partial acceptance
    #include <bits/stdc++.h>
using namespace std;

int binSearchLowerBound(vector<long long> &odd, long long key){
	int l = 0;
	int r = odd.size()-1;
	int index = 0;

	while(l<=r){
		int mid = l+(r-l)/2;
		if(odd[mid]==key){
			index = mid;
			break;
		}
		else if(odd[mid]>key) r = mid-1;
		else l = mid+1;
	}

	while(index>=0 && odd[index]>=key){
		index--;
	}
	index++;
	return index;
}

int binSearchUpperBound(vector<long long> &odd, long long key){
	int l = 0;
	int r = odd.size()-1;
	int n = odd.size();
	int index = r;

	while(l<=r){
		int mid = l+(r-l)/2;
		if(odd[mid]==key){
			index = mid;
			break;
		}
		else if(odd[mid]>key) r = mid-1;
		else l = mid+1;
	}

	while(index<n && odd[index]<=key){
		index++;
	}
	index--;
	return index;
}

int main() {
	long long N,L,R;
	cin>>N>>L>>R;
	vector<long long> arr(N);
	for(int i=0;i<N;i++)
		cin>>arr[i];
	vector<long long> even;
	vector<long long> odd;

	for(auto x:arr){
		if(x&1) odd.push_back(x);
		else even.push_back(x);
	}

	sort(odd.begin(),odd.end()); //O(len(odd)*log(len(odd)))
	sort(even.begin(),even.end()); //O(len(even)*log(len(even)))

	long long ans = 0;
	int idx = 0;
	for(auto x:even){
		if(x>=R) continue;
			int ind = binSearchUpperBound(odd,R-x);
			int ind1 = binSearchLowerBound(odd,L-x);
			if(odd[ind]+x<L) continue;
			if(odd[ind1]+x<L) {
				while(ind1<odd.size() && odd[ind1]<L-x){
					ind1++;
				}
				if(ind1>=odd.size()) ind1--;
			}
			if(odd[ind]+x>R){
				while(ind>=0 && odd[ind]>(R-x)){
					ind--;
				}
				if(ind<0) ind++; 
			}
			ans+=(ind-ind1+1);
		idx++;
	}
	cout<<ans<<'\n';

	return 0;
}

Q2. Bob's Quest
//Did not try it

Q. GFG SHUFFLE ARRAY using xtra space
	void shuffleArray(int arr[],int n)
	{
	    // Your code goes here
	    int mid = n/2;
	    const int midFixed = n/2;
	    vector<int> xtra(n);
	    int l = 0;
	    int i = 0;int j=0;
	    while(l<midFixed && mid<n){
	        xtra[i++] = arr[l++]; 
	        xtra[i++] = arr[mid++];
	    }
	    i=0;
	    for(auto x:xtra){
	        arr[i++] = x;
	    }
	}

	
Q Sum of dependencies in a graph

class Solution {
  public:
    int sumOfDependencies(vector<int> adj[], int V) {
        // code here
        //Don't need to know graph to solve this
        int ans = 0;
        for(int i=0;i<V;i++)
            ans+=adj[i].size();
        
        return ans;
    }
};	


Q. Check whether BST contains Dead End 

class Solution{
  public:
  
    bool helper(Node *node, int MIN, int MAX){
        if(!node) return 0;
        
        if(node->data == MIN and node->data == MAX) return 1;
        
        return helper(node->left, MIN, node->data-1) or helper(node->right, node->data+1, MAX);
    }
    
  
    bool isDeadEnd(Node *root)
    {
        //Your code here
        return helper(root, 1, 1e5);
    }


Q. Number of subarrays with max
    long countSubarrays(int a[], int n, int L, int R)
    {
        // Complete the function
        //Brute force 
        int ans = 0;
        for(int i=0;i<n;i++){
            int ma = a[i];
            for(int j=i;j<n;j++){
                ma = max(ma,a[j]);
                // cout<<ma<<" ";
                if(ma>=L && ma<=R) ans++;
            }
        }
        
        // cout<<"\n";
        
        return ans;
        
    }

Q. Transform to prime
class Solution
{
    public:
    
    int isPrime(int N){
        if(N<2) return 0;
        
        for(int i=2;i*i<=N;i++) if(N%i==0) return 0;
        
        return 1;
    }
    
    
    
    
    
    
    int minNumber(int arr[],int N)
    {
        int sum = 0;
        int arrSum = 0;
        for(int i=0;i<N;i++){
            sum+=arr[i];
        }
        
        arrSum = sum;
        
        if(isPrime(sum)) return 0;
        
        while(!isPrime(sum)){
            sum++;
        }
        
        return sum - arrSum;
    }
};

class Solution {
  public:
    
    int sumReturner(int n){
        int sum = 0;
        while(n){
            sum+=(n%10);
            n/=10;
        }
        return sum;
    }
    
    int factorFinder(int &n){
        int l = 2;
        while(l<=n){
            if(n%l==0){
                n/=l;
                return l;
            }
            l++;
        }
        n=0;
        return 0;
    }
    
    int isPrime(int n){
        for(int i=2;i*i<=n;i++) if(n%i==0) return 0;
        return 1;
    }
  
    int smithNum(int n) {
        
        if(isPrime(n)) return 0; //Since not a composite number
        
        int sumOfDigits = sumReturner(n);
        int sumOfPrimeFactors = 0;
        while(n){
            int tempPrimeFactors = factorFinder(n);
            sumOfPrimeFactors += sumReturner(tempPrimeFactors);
        }
        
        
        return sumOfDigits == sumOfPrimeFactors ? 1 : 0;
        
    }
};