// HackerEarth November circuits solution
Q1. Find Pairs Partial acceptance
    #include <bits/stdc++.h>
using namespace std;

int binSearchLowerBound(vector<long long> &odd, long long key){
	int l = 0;
	int r = odd.size()-1;
	int index = 0;

	while(l<=r){
		int mid = l+(r-l)/2;
		if(odd[mid]==key){
			index = mid;
			break;
		}
		else if(odd[mid]>key) r = mid-1;
		else l = mid+1;
	}

	while(index>=0 && odd[index]>=key){
		index--;
	}
	index++;
	return index;
}

int binSearchUpperBound(vector<long long> &odd, long long key){
	int l = 0;
	int r = odd.size()-1;
	int n = odd.size();
	int index = r;

	while(l<=r){
		int mid = l+(r-l)/2;
		if(odd[mid]==key){
			index = mid;
			break;
		}
		else if(odd[mid]>key) r = mid-1;
		else l = mid+1;
	}

	while(index<n && odd[index]<=key){
		index++;
	}
	index--;
	return index;
}

int main() {
	long long N,L,R;
	cin>>N>>L>>R;
	vector<long long> arr(N);
	for(int i=0;i<N;i++)
		cin>>arr[i];
	vector<long long> even;
	vector<long long> odd;

	for(auto x:arr){
		if(x&1) odd.push_back(x);
		else even.push_back(x);
	}

	sort(odd.begin(),odd.end()); //O(len(odd)*log(len(odd)))
	sort(even.begin(),even.end()); //O(len(even)*log(len(even)))

	long long ans = 0;
	int idx = 0;
	for(auto x:even){
		if(x>=R) continue;
			int ind = binSearchUpperBound(odd,R-x);
			int ind1 = binSearchLowerBound(odd,L-x);
			if(odd[ind]+x<L) continue;
			if(odd[ind1]+x<L) {
				while(ind1<odd.size() && odd[ind1]<L-x){
					ind1++;
				}
				if(ind1>=odd.size()) ind1--;
			}
			if(odd[ind]+x>R){
				while(ind>=0 && odd[ind]>(R-x)){
					ind--;
				}
				if(ind<0) ind++; 
			}
			ans+=(ind-ind1+1);
		idx++;
	}
	cout<<ans<<'\n';

	return 0;
}

Q2. Bob's Quest
//Did not try it

Q. GFG SHUFFLE ARRAY using xtra space
	void shuffleArray(int arr[],int n)
	{
	    // Your code goes here
	    int mid = n/2;
	    const int midFixed = n/2;
	    vector<int> xtra(n);
	    int l = 0;
	    int i = 0;int j=0;
	    while(l<midFixed && mid<n){
	        xtra[i++] = arr[l++]; 
	        xtra[i++] = arr[mid++];
	    }
	    i=0;
	    for(auto x:xtra){
	        arr[i++] = x;
	    }
	}

	
Q Sum of dependencies in a graph

class Solution {
  public:
    int sumOfDependencies(vector<int> adj[], int V) {
        // code here
        //Don't need to know graph to solve this
        int ans = 0;
        for(int i=0;i<V;i++)
            ans+=adj[i].size();
        
        return ans;
    }
};	


Q. Check whether BST contains Dead End 

class Solution{
  public:
  
    bool helper(Node *node, int MIN, int MAX){
        if(!node) return 0;
        
        if(node->data == MIN and node->data == MAX) return 1;
        
        return helper(node->left, MIN, node->data-1) or helper(node->right, node->data+1, MAX);
    }
    
  
    bool isDeadEnd(Node *root)
    {
        //Your code here
        return helper(root, 1, 1e5);
    }


Q. Number of subarrays with max
    long countSubarrays(int a[], int n, int L, int R)
    {
        // Complete the function
        //Brute force 
        int ans = 0;
        for(int i=0;i<n;i++){
            int ma = a[i];
            for(int j=i;j<n;j++){
                ma = max(ma,a[j]);
                // cout<<ma<<" ";
                if(ma>=L && ma<=R) ans++;
            }
        }
        
        // cout<<"\n";
        
        return ans;
        
    }

Q. Transform to prime
class Solution
{
    public:
    
    int isPrime(int N){
        if(N<2) return 0;
        
        for(int i=2;i*i<=N;i++) if(N%i==0) return 0;
        
        return 1;
    }
    
    
    
    
    
    
    int minNumber(int arr[],int N)
    {
        int sum = 0;
        int arrSum = 0;
        for(int i=0;i<N;i++){
            sum+=arr[i];
        }
        
        arrSum = sum;
        
        if(isPrime(sum)) return 0;
        
        while(!isPrime(sum)){
            sum++;
        }
        
        return sum - arrSum;
    }
};

class Solution {
  public:
    
    int sumReturner(int n){
        int sum = 0;
        while(n){
            sum+=(n%10);
            n/=10;
        }
        return sum;
    }
    
    int factorFinder(int &n){
        int l = 2;
        while(l<=n){
            if(n%l==0){
                n/=l;
                return l;
            }
            l++;
        }
        n=0;
        return 0;
    }
    
    int isPrime(int n){
        for(int i=2;i*i<=n;i++) if(n%i==0) return 0;
        return 1;
    }
  
    int smithNum(int n) {
        
        if(isPrime(n)) return 0; //Since not a composite number
        
        int sumOfDigits = sumReturner(n);
        int sumOfPrimeFactors = 0;
        while(n){
            int tempPrimeFactors = factorFinder(n);
            sumOfPrimeFactors += sumReturner(tempPrimeFactors);
        }
        
        
        return sumOfDigits == sumOfPrimeFactors ? 1 : 0;
        
    }
};

   bool subArrayExists(int arr[], int n)
    {
        //Your code here
        
        //Brute Force
        for(int i=0;i<n;i++) if(arr[i]==0) return 1;
        
        for(int i=0;i<n;i++){
            int temp = 0;
            for(int j=i;j<n;j++){
                temp+=arr[j];
                if(temp==0) return 1;
            }
        }
        
        return 0;
    }

    long maximumSumSubarray(int K, vector<int> &Arr , int N){
        // code here 
        if(N<K) return 0;
        
        int l=0;
        long sum = 0;
        long ans = 0;
        for(int i=0;i<K;i++){
            sum+=Arr[i];
        }
        ans = sum;
        for(int i=K;i<N && l<N;i++){
            sum-=Arr[l];
            sum+=Arr[i];
            l++;
            ans = max(ans,sum);
        }
        return ans;
    }
};

Q. Gold mine Problem


class Solution{
public:
    int dp[1000][1000];
    int help(vector<vector<int> > &M,int currX, int currY, int Msize, int Nsize){
        if(currX<0) return 0;
        if(currX>=Msize || currY>=Nsize){
            return dp[currX][currY]=0;
        }
        if(dp[currX][currY]!=-1) return dp[currX][currY];
        
        if(currX==0) return dp[currX][currY] = M[currX][currY]+max(help(M, currX, currY+1,Msize,Nsize),help(M,currX+1, currY+1,Msize,Nsize));
        
        return dp[currX][currY] = M[currX][currY]+max(max(help(M, currX, currY+1,Msize,Nsize),help(M,currX+1, currY+1,Msize,Nsize)),
                                        
                                    help(M,currX-1,currY+1,Msize,Nsize));
    }
    int maxGold(int n, int m, vector<vector<int>> M)
    {
        // code here
        memset(dp,-1,sizeof(dp));
        
        int Msize = M.size();
        int Nsize = M[0].size();
        
        int ans = 0;
        int temp = 0;
        
        for(int i=0;i<Msize;i++){
            // cout<<
            ans = max(ans,help(M,i,0,Msize,Nsize));
            // cout<<ans<<'\n';
        }
        return ans;
    }
};

Q. Consecutive One's not allowed

class Solution{
public:

    const ll MOD = 1e9+7;
	// #define ll long long
	int chkConsOnes(int n){
	    int temp = 0;
	    int prevTemp = 0;
	    while(n){
	        prevTemp = temp;
	        temp = n%2;
	        n/=2;
	        
	        if(temp==1 && prevTemp == 1) return 1;
	    }
	    
	    return 0;
	}
	
	ll countStrings(int n) {
	    // code here
	    
	    ll ans = 5;
	    
	    ll n1 = 2, n2 = 3;
	    
	    if(n==1) return n1;
	    if(n==2) return n2;
	    if(n==3) return (n1+n2);
	    n-=3;
	    
	    while(n--){
	        n1 = n2;
	        n2 = ans;
	        ans = (n1%MOD+n2%MOD)%MOD;
	    }
	    
	    return ans%MOD;
	}
};


Q. String's count

long long nc1(long long n){
    return n;
}

long long nc2(long long n){
    return ((n)*(n-1))/2;
}


long long nmultiple(long long n){
    return ((n)*(n-1)*(n-2))/2;
}


long long int countStr(long long int n){
    //complete the function here
    if(n==1) return 3;
    
    if(n==2) return 8;
    
    long long ans = 0;
    ans ++;
    ans+=2*nc1(n);
    ans+=3*nc2(n);
    ans+=nmultiple(n);
    
    return ans;
}

Q. Game of XOR
  int gameOfXor(int N , int A[]) {
        // code here
        if(N%2==0) return 0;
        int ans = 0;
        for(int i=0;i<N;i+=2){
            if(i<N) ans^=A[i];
        }
        
        return ans;
    }

Q. Maximum number of meetings 


class Solution{
public:

static   bool myComparison(const pair<pair<int,int>,int> &a,const pair<pair<int,int>,int> &b)
{
       if(a.first.second==b.first.second) return a.first.first<b.first.first;
       return a.first.second<b.first.second;
}
    
    vector<int> maxMeetings(int N,vector<int> &S,vector<int> &F){
        vector<pair<pair<int,int>,int> > meetings;
        for(int i=0;i<N;i++){
            meetings.push_back({{S[i],F[i]},i});
        }
        
        sort(meetings.begin(),meetings.end(),myComparison);
       vector<int> ans;
       ans.push_back(meetings[0].second+1);
       pair<int,int> temp = {meetings[0].first.first,meetings[0].first.second};
       for(int i=1;i<N;i++){
           if(meetings[i].first.first>temp.second){
               ans.push_back(meetings[i].second+1);
               temp = {meetings[i].first.first,meetings[i].first.second};
           }
       }
       
       sort(ans.begin(),ans.end());
       
       return ans;
    }
};


Q. Count Element occurences
   int countOccurence(int arr[], int n, int k) {
        // Your code here
        unordered_map<int,int> mp;
        for(int i=0;i<n;i++) mp[arr[i]]++;
        int ans = 0;
        for(auto x:mp) if(x.second>(n/k)) ans++;
        return ans;
    }


Q. Anti Diagonal traversal of matrix

void printReq(vector<vector<int>> &matrix, vector<vector<int>> &visited, vector<int> &ans,int i, int j,int n){
                while(i<n && j>=0 && !visited[i][j]){
                    visited[i][j]=1;
                    ans.push_back(matrix[i][j]);
                    i++,j--;
                }
    }
  
    vector<int> antiDiagonalPattern(vector<vector<int>> matrix) 
    {
        // Code here
        int n = matrix.size();
        vector<vector<int> > visited(n,vector<int> (n,0));
        vector<int> ans;
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                if(!visited[i][j]){
                    printReq(matrix,visited,ans,i,j,n);
                }
            }
        }
        
        return ans;
    }

Q. Winner of an election

  //Function to return the name of candidate that received maximum votes.
    vector<string> winner(string arr[],int n)
    {
        // Your code here
        // Return the string containing the name and an integer
        // representing the number of votes the winning candidate got
        
        string temp = "";
        int ans = 0;
        for(int i = 0; i<100000;i++) temp+='z';
        
        unordered_map<string,int> mp;
        for(int i=0;i<n;i++){
            mp[arr[i]]++;
        }
        for(auto x:mp){
            if(x.second > ans){
                ans = x.second;
                temp = x.first;
            }
            else if(x.second == ans){
                if(x.first<temp){
                    temp = x.first;
                }
            }
        }
        
        return {temp, to_string(ans)};
    }

Q. New Year resolution dp 140 testcases attempt1

    int help1(int index,int coins[],int N,int sum,vector<vector<int> > &dp){
        
        if(index>=N){
            if((sum%20 == 0 || sum%24==0 || sum == 2024) && sum!=0) return 1;
            return 0;
        }
        
        if(sum>2024) return 0;
        
        if((sum%20 == 0 || sum%24==0 || sum == 2024) && sum!=0) return dp[sum][coins[index]] = 1;
        
        
        if(dp[sum][coins[index]]!=-1) return dp[sum][coins[index]];
        
        return dp[sum][coins[index]]
             = help1(index+1,coins,N,sum+coins[index],dp) || help1(index+1,coins,N,sum,dp);
    }
    
    int isPossible(int N , int coins[]) 
    {
        int sum = 0;
        int index = 0;
        vector<vector<int> > dp(2024,vector<int>(2024,-1));
        return help1(index,coins,N,sum,dp);
    }


Q. Array Pair sum divisibility problem

 bool canPair(vector<int> nums, int k) {
        // Handling base cases
        int n = nums.size();
        if(nums.size()%2!=0) return 0;
        
        int sum = 0;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
        }
        if(sum%k!=0) return 0;
        
        // will be writing mainCode here
        //first going brute force
        vector<pair<int,int> > takenOrNot;
        for(auto x:nums){
            takenOrNot.push_back({x,0});
        }
        
        for(int i=0;i<n;i++){
            int temp = 1;
            int temp1 = 1;
            if(!takenOrNot[i].second){
                temp1 = 0;
            for(int j=i;j<n;j++){
                if((nums[i]+nums[j])%k==0 && !takenOrNot[j].second){
                    takenOrNot[j].second = 1;
                    takenOrNot[i].second = 1;
                    temp = 0;
                    break;
                }
            }   
            }
            if(temp && !temp1) return 0;
        }
        
        for(auto x:takenOrNot){
            if(x.second != 1) return 0;
        }
        
        return 1;
    }
};


Find element occuring once when (Google)

class Solution {
  public:
    int singleElement(int arr[] ,int N) {
        // code here
        unordered_map<int,int> mp;
        for(int i=0;i<N;i++){
            mp[arr[i]]++;
        }
        for(auto x:mp){
            if(x.second == 1) return x.first;
        }
        
        return -1;
    }
};


Q. Techfest and the queue 

  BRUTE FORCE

    int helper(int n){
        int sum = 0;
        int l = 2;
        int cnt = 0;
        
        while(n && n>=l){
            if(n%l==0){
                n/=l;
                sum++;
            }
            else{
                l++;
            }
        }
        return sum;
    }

	int sumOfPowers(int a, int b){
	    // Code here
	    int ans = 0;
	    for(int i=a;i<=b;i++) ans+=helper(i);
	    return ans;
	}


O(Nsqrt(N))

    
    int isPrime(int n){
        for(int i=2;i*i<=n;i++){
            if(n%i==0) return i;
        }
        
        return -1;
    }
    
    int helper(int n){
        int sum = 0;
        int l = 2;
        int cnt = 0;
        
        if(n<2) return 0;
        
        while(n>0){
            int isPrimeResp = isPrime(n);
            if(isPrimeResp == -1) return ++sum;
            else{
                n/=isPrimeResp;
                sum++;
            }
        }
        return sum;
    }

	int sumOfPowers(int a, int b){
	    // Code here
	    int ans = 0;
	    for(int i=a;i<=b;i++) ans+=helper(i);
	    return ans;
	}



Q. Merge two sorted linkedlist in reverse order
class Solution
{
    public:
    
    
    struct Node * reverseList(Node* list){
        
        if(!list && !list->next) return list;
        
        Node* prev = NULL;
        Node* curr = list;
        Node* forw = list->next;
        
        while(forw){
            curr->next = prev;
            prev = curr;
            curr = forw;
            forw = forw -> next;
        }
        
        curr->next = prev;
        
        return curr;
        
    }
    
    
    struct Node * mergeResult(Node *node1,Node *node2)
    {
        // your code goes here
        // int data = node1->data > node2->data ? node2->data:node1->data;
        
        
        Node* ans = new Node();
        Node* res = ans;
        while(node1 && node2){
            Node* temp=new Node();
            if(node1->data < node2->data){
                ans->data = node1->data;
                ans->next = temp;
                node1 = node1->next;
                ans = ans->next;
            }else{
                ans->data = node2->data;
                ans->next = temp;
                node2 = node2->next;
                ans = ans->next;
            }
        }
        while(node1){
                Node* temp=new Node();
                ans->data = node1->data;
                ans->next = temp;
                node1 = node1->next;
                ans = ans->next;
        }
        while(node2){
                Node* temp = new Node();
                ans->data = node2->data;
                ans->next = temp;
                node2 = node2->next;
                ans = ans->next;
        }
        
        Node* result = reverseList(res);
        
        
        return result?result->next:result;
    }  
};

Q. Search pattern KMP algorithm
//BRUTE FORCE 1070 / 1120

    vector <int> search(string pat, string txt)
        {
            //code here
            vector<int> ans;
            int n = pat.length();
            for(int i=0;i<txt.size();i++){
                if(pat==txt.substr(i,n)){
                    ans.push_back(i+1);
                }
            }
            
            if(ans.size()>0) return ans;
            
            return {-1};
        }

//I GUESS BAD TEST CASE DESING SHOULD INCLUDE aaaaa.. 10^5
  aaaaa^10^4

 public:
        vector <int> search(string pat, string txt)
        {
            //code here
            vector<int> ans;
            int n = pat.length();
            for(int i=0;i<txt.size();i++){
                if(pat[0]==txt[i]){
                    if(pat==txt.substr(i,n)){
                        ans.push_back(i+1);
                    }   
                }
            }
            
            if(ans.size()>0) return ans;
            
            return {-1};
        }

Q. Longest subarray with sum 

//BRUTE FORCE X can be made O(n*n) using dp but not recommended

    void help(int arr[],int index,int n,int k,int &ans,int currAns, int sum,int included){
        
        if(included && index<=n) currAns++;
        
        if(sum%k==0 && index<=n){
            // cout<<currAns<<' '<<sum<<" "<<index<<"Entered\n";
            ans = max(ans,currAns);
        }
        
        if(index>=n) return ;
        
        help(arr,index+1,n,k,ans,currAns,sum+arr[index],1);//included
        help(arr,index+1,n,k,ans,currAns,sum,0);//excluded
        
    }

	int longSubarrWthSumDivByK(int arr[], int n, int k)
	{
	        int ans = 0;
	        help(arr,1,n,k,ans,0,arr[0],1);
	        help(arr,1,n,k,ans,0,0,0);
	        return ans;
	}

Q. Reverse first k elements of queue

Solution using stack
class Solution
{
    public:
    
    // Function to reverse first k elements of a queue.
    queue<int> modifyQueue(queue<int> q, int k) {
        // add code here.
        stack<int> auxQueue;
        queue<int> ans;
        for(int i=0;i<k && !q.empty();i++){
            auxQueue.push(q.front());
            q.pop();
        }
        
        while(!auxQueue.empty()){
            ans.push(auxQueue.top());
            auxQueue.pop();
        }
        
        while(!q.empty()){
            ans.push(q.front());
            q.pop();
        }
        
        return ans;
    }
};