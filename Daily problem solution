// HackerEarth November circuits solution
Q1. Find Pairs Partial acceptance
    #include <bits/stdc++.h>
using namespace std;

int binSearchLowerBound(vector<long long> &odd, long long key){
	int l = 0;
	int r = odd.size()-1;
	int index = 0;

	while(l<=r){
		int mid = l+(r-l)/2;
		if(odd[mid]==key){
			index = mid;
			break;
		}
		else if(odd[mid]>key) r = mid-1;
		else l = mid+1;
	}

	while(index>=0 && odd[index]>=key){
		index--;
	}
	index++;
	return index;
}

int binSearchUpperBound(vector<long long> &odd, long long key){
	int l = 0;
	int r = odd.size()-1;
	int n = odd.size();
	int index = r;

	while(l<=r){
		int mid = l+(r-l)/2;
		if(odd[mid]==key){
			index = mid;
			break;
		}
		else if(odd[mid]>key) r = mid-1;
		else l = mid+1;
	}

	while(index<n && odd[index]<=key){
		index++;
	}
	index--;
	return index;
}

int main() {
	long long N,L,R;
	cin>>N>>L>>R;
	vector<long long> arr(N);
	for(int i=0;i<N;i++)
		cin>>arr[i];
	vector<long long> even;
	vector<long long> odd;

	for(auto x:arr){
		if(x&1) odd.push_back(x);
		else even.push_back(x);
	}

	sort(odd.begin(),odd.end()); //O(len(odd)*log(len(odd)))
	sort(even.begin(),even.end()); //O(len(even)*log(len(even)))

	long long ans = 0;
	int idx = 0;
	for(auto x:even){
		if(x>=R) continue;
			int ind = binSearchUpperBound(odd,R-x);
			int ind1 = binSearchLowerBound(odd,L-x);
			if(odd[ind]+x<L) continue;
			if(odd[ind1]+x<L) {
				while(ind1<odd.size() && odd[ind1]<L-x){
					ind1++;
				}
				if(ind1>=odd.size()) ind1--;
			}
			if(odd[ind]+x>R){
				while(ind>=0 && odd[ind]>(R-x)){
					ind--;
				}
				if(ind<0) ind++; 
			}
			ans+=(ind-ind1+1);
		idx++;
	}
	cout<<ans<<'\n';

	return 0;
}

Q2. Bob's Quest
//Did not try it

